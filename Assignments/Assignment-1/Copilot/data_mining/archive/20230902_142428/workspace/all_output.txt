Given the requirements, we will use Python with Flask for the backend, and HTML, CSS, JavaScript, and Tailwind for the frontend. We will also use SQLite for the database.

Here are the core classes, functions, and methods that will be necessary:

1. `User`: A class to represent a user. It will have methods to get and set the user's dietary preferences, available ingredients, and cooking skills.

2. `Recipe`: A class to represent a recipe. It will have methods to get and set the recipe's ingredients, difficulty level, and dietary category.

3. `Recommender`: A class to recommend recipes based on a user's dietary preferences, available ingredients, and cooking skills. It will have a method `recommend` that takes a `User` object and returns a list of `Recipe` objects.

4. `app.py`: The entry point of the application. It will define the routes for the web application.

5. `database.py`: A module to handle database operations. It will have functions to add, update, and retrieve users and recipes.

6. `index.html`, `profile.html`, `recipe.html`: HTML files for the homepage, user profile page, and recipe page respectively.

7. `style.css`: A CSS file to style the HTML pages.

8. `script.js`: A JavaScript file to handle user interactions.

Now, let's write the code for each file.

app.py
```python
from flask import Flask, render_template, request, redirect, url_for
from database import get_user, update_user, get_recipe, get_all_recipes
from recommender import Recommender
from user import User
from recipe import Recipe

app = Flask(__name__)

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/profile', methods=['GET', 'POST'])
def profile():
    if request.method == 'POST':
        user_id = request.form['user_id']
        dietary_preferences = request.form['dietary_preferences']
        available_ingredients = request.form['available_ingredients'].split(',')
        cooking_skills = request.form['cooking_skills']
        user = User(user_id, dietary_preferences, available_ingredients, cooking_skills)
        update_user(user)
        return redirect(url_for('recommendations', user_id=user_id))
    else:
        user_id = request.args.get('user_id')
        user = get_user(user_id)
        return render_template('profile.html', user=user)

@app.route('/recommendations')
def recommendations():
    user_id = request.args.get('user_id')
    user = get_user(user_id)
    recommender = Recommender(get_all_recipes())
    recommended_recipes = recommender.recommend(user)
    return render_template('recommendations.html', recipes=recommended_recipes)

@app.route('/recipe')
def recipe():
    recipe_id = request.args.get('recipe_id')
    recipe = get_recipe(recipe_id)
    return render_template('recipe.html', recipe=recipe)

if __name__ == '__main__':
    app.run(debug=True)
```

user.py
```python
class User:
    def __init__(self, user_id, dietary_preferences, available_ingredients, cooking_skills):
        self.user_id = user_id
        self.dietary_preferences = dietary_preferences
        self.available_ingredients = available_ingredients
        self.cooking_skills = cooking_skills
```

recipe.py
```python
class Recipe:
    def __init__(self, recipe_id, ingredients, difficulty, dietary_category):
        self.recipe_id = recipe_id
        self.ingredients = ingredients
        self.difficulty = difficulty
        self.dietary_category = dietary_category
```

recommender.py
```python
class Recommender:
    def __init__(self, all_recipes):
        self.all_recipes = all_recipes

    def recommend(self, user):
        recommended_recipes = []
        for recipe in self.all_recipes:
            if user.dietary_preferences == recipe.dietary_category and set(user.available_ingredients).issubset(set(recipe.ingredients)) and user.cooking_skills == recipe.difficulty:
                recommended_recipes.append(recipe)
        return recommended_recipes
```

database.py
```python
import sqlite3
from user import User
from recipe import Recipe

def get_user(user_id):
    conn = sqlite3.connect('database.db')
    c = conn.cursor()
    c.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
    row = c.fetchone()
    conn.close()
    if row is None:
        return None
    else:
        return User(row[0], row[1], row[2].split(','), row[3])

def update_user(user):
    conn = sqlite3.connect('database.db')
    c = conn.cursor()
    c.execute('UPDATE users SET dietary_preferences = ?, available_ingredients = ?, cooking_skills = ? WHERE user_id = ?', (user.dietary_preferences, ','.join(user.available_ingredients), user.cooking_skills, user.user_id))
    conn.commit()
    conn.close()

def get_recipe(recipe_id):
    conn = sqlite3.connect('database.db')
    c = conn.cursor()
    c.execute('SELECT * FROM recipes WHERE recipe_id = ?', (recipe_id,))
    row = c.fetchone()
    conn.close()
    if row is None:
        return None
    else:
        return Recipe(row[0], row[1].split(','), row[2], row[3])

def get_all_recipes():
    conn = sqlite3.connect('database.db')
    c = conn.cursor()
    c.execute('SELECT * FROM recipes')
    rows = c.fetchall()
    conn.close()
    return [Recipe(row[0], row[1].split(','), row[2], row[3]) for row in rows]
```

requirements.txt
```plaintext
flask==1.1.2
```

The HTML, CSS, and JavaScript files will be placed in the `templates` and `static` directories respectively, following the Flask convention. The HTML files will contain forms for users to input their dietary preferences, available ingredients, and cooking skills, and to display the recommended recipes. The CSS file will style these forms and the recipe display. The JavaScript file will handle form submissions and update the recipe display based on the recommendations.

The SQLite database will contain two tables: `users` and `recipes`. The `users` table will store the user ID, dietary preferences, available ingredients, and cooking skills. The `recipes` table will store the recipe ID, ingredients, difficulty level, and dietary category. The `get_user`, `update_user`, `get_recipe`, and `get_all_recipes` functions in the `database.py` module will perform the necessary database operations.

The `Recommender` class in the `recommender.py` module will recommend recipes based on a user's dietary preferences, available ingredients, and cooking skills. The `recommend` method will return a list of `Recipe` objects that match the user's dietary preferences, contain only the user's available ingredients, and are at the user's cooking skill level.

The `app.py` module will define the routes for the web application. The `index` route will render the homepage. The `profile` route will render the user profile page and handle form submissions to update the user's dietary preferences, available ingredients, and cooking skills. The `recommendations` route will render the recommended recipes for a user. The `recipe` route will render a specific recipe.