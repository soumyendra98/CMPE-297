Assumptions:

1. The starting and ending points of the snakes and ladders will be randomly generated.
2. The current position of each player will be displayed on the board with different colors for each player.
3. The game will be restarted by clicking a "Restart" button.

Core classes, functions, methods:

1. `GameBoard` class: This class will be responsible for creating the game board, placing the snakes and ladders, and updating the positions of the players.
2. `Player` class: This class will represent a player in the game. It will keep track of the player's current position on the board.
3. `Dice` class: This class will simulate a dice roll.
4. `startGame` function: This function will start the game by creating a new `GameBoard` and two `Player` instances.
5. `restartGame` function: This function will restart the game by resetting the `GameBoard` and `Player` instances.

Now, let's start with the entrypoint file, `index.html`.

index.html
```html
<!DOCTYPE html>
<html>
<head>
    <title>Snake and Ladder Game</title>
    <link rel="stylesheet" type="text/css" href="styles.css">
</head>
<body>
    <div id="game-board"></div>
    <button id="restart-button">Restart</button>
    <script src="game.js"></script>
</body>
</html>
```

Next, let's move on to the CSS file, `styles.css`.

styles.css
```css
#game-board {
    display: grid;
    grid-template-columns: repeat(10, 1fr);
    grid-template-rows: repeat(10, 1fr);
}

#game-board div {
    border: 1px solid black;
    text-align: center;
    padding: 10px;
}

#restart-button {
    margin-top: 20px;
}
```

Finally, let's write the JavaScript file, `game.js`.

game.js
```javascript
class GameBoard {
    constructor() {
        this.board = this.createBoard();
        this.snakes = this.placeSnakes();
        this.ladders = this.placeLadders();
    }

    createBoard() {
        // Create a 10x10 game board
    }

    placeSnakes() {
        // Place snakes on the board
    }

    placeLadders() {
        // Place ladders on the board
    }

    updatePlayerPosition(player) {
        // Update the position of a player on the board
    }
}

class Player {
    constructor(color) {
        this.position = 0;
        this.color = color;
    }

    move(steps) {
        this.position += steps;
    }
}

class Dice {
    roll() {
        return Math.floor(Math.random() * 6) + 1;
    }
}

function startGame() {
    const gameBoard = new GameBoard();
    const player1 = new Player('red');
    const player2 = new Player('blue');
    const dice = new Dice();

    // Game logic goes here
}

function restartGame() {
    // Restart the game
}

document.getElementById('restart-button').addEventListener('click', restartGame);

startGame();
```

This is a basic structure of the game. The actual implementation of the game logic and the methods in the `GameBoard`, `Player`, and `Dice` classes will depend on the specific requirements and constraints of the game.