Given the complexity of the application, we will need to create several files and directories to keep our code organized. Here is a list of the core classes, functions, and methods that will be necessary:

1. `server.js`: This is the entry point of our application. It sets up our Express server and connects to the MongoDB database.

2. `routes/recipeRoutes.js`: This file will contain all the routes related to recipes.

3. `controllers/recipeController.js`: This file will contain all the logic related to recipes. It will have methods like `getRecipes`, `getRecipe`, `createRecipe`, `updateRecipe`, and `deleteRecipe`.

4. `models/Recipe.js`: This file will define the schema for our Recipe model.

5. `utils/recipeRecommender.js`: This file will contain the logic for recommending recipes based on user's dietary preferences, available ingredients, and cooking skills.

6. `client/src/App.js`: This is the main React component that renders the application.

7. `client/src/components/RecipeList.js`: This component will display the list of recommended recipes.

8. `client/src/components/Recipe.js`: This component will display a single recipe.

9. `client/src/components/SearchBar.js`: This component will allow users to search for recipes.

10. `client/src/components/UserPreferences.js`: This component will allow users to set their dietary preferences and cooking skills.

Now, let's start with the entry point of our application, `server.js`.

server.js
```javascript
const express = require('express');
const mongoose = require('mongoose');
const recipeRoutes = require('./routes/recipeRoutes');

const app = express();

mongoose.connect('mongodb://localhost:27017/recipeRecommender', {
  useNewUrlParser: true,
  useUnifiedTopology: true,
});

app.use(express.json());
app.use('/api/recipes', recipeRoutes);

const PORT = process.env.PORT || 5000;
app.listen(PORT, () => console.log(`Server running on port ${PORT}`));
```

Next, let's define our routes in `routes/recipeRoutes.js`.

routes/recipeRoutes.js
```javascript
const express = require('express');
const recipeController = require('../controllers/recipeController');

const router = express.Router();

router.get('/', recipeController.getRecipes);
router.get('/:id', recipeController.getRecipe);
router.post('/', recipeController.createRecipe);
router.put('/:id', recipeController.updateRecipe);
router.delete('/:id', recipeController.deleteRecipe);

module.exports = router;
```

Now, let's define our controller in `controllers/recipeController.js`.

controllers/recipeController.js
```javascript
const Recipe = require('../models/Recipe');
const recipeRecommender = require('../utils/recipeRecommender');

exports.getRecipes = async (req, res) => {
  try {
    const userPreferences = req.body;
    const recipes = await Recipe.find();
    const recommendedRecipes = recipeRecommender.recommend(recipes, userPreferences);
    res.json(recommendedRecipes);
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
};

// Other controller methods go here
```

Next, let's define our Recipe model in `models/Recipe.js`.

models/Recipe.js
```javascript
const mongoose = require('mongoose');

const RecipeSchema = new mongoose.Schema({
  title: String,
  ingredients: [String],
  instructions: String,
  dietaryPreferences: [String],
  skillLevel: String,
});

module.exports = mongoose.model('Recipe', RecipeSchema);
```

Now, let's define our recipe recommender in `utils/recipeRecommender.js`.

utils/recipeRecommender.js
```javascript
exports.recommend = (recipes, userPreferences) => {
  // Logic for recommending recipes goes here
};
```

Finally, let's define our React components in `client/src/App.js`, `client/src/components/RecipeList.js`, `client/src/components/Recipe.js`, `client/src/components/SearchBar.js`, and `client/src/components/UserPreferences.js`.

client/src/App.js
```javascript
import React from 'react';
import RecipeList from './components/RecipeList';
import SearchBar from './components/SearchBar';
import UserPreferences from './components/UserPreferences';

function App() {
  return (
    <div className="App">
      <SearchBar />
      <UserPreferences />
      <RecipeList />
    </div>
  );
}

export default App;
```

client/src/components/RecipeList.js
```javascript
import React from 'react';
import Recipe from './Recipe';

function RecipeList({ recipes }) {
  return (
    <div>
      {recipes.map((recipe) => (
        <Recipe key={recipe._id} recipe={recipe} />
      ))}
    </div>
  );
}

export default RecipeList;
```

client/src/components/Recipe.js
```javascript
import React from 'react';

function Recipe({ recipe }) {
  return (
    <div>
      <h2>{recipe.title}</h2>
      <p>{recipe.instructions}</p>
    </div>
  );
}

export default Recipe;
```

client/src/components/SearchBar.js
```javascript
import React from 'react';

function SearchBar() {
  return (
    <div>
      <input type="text" placeholder="Search for recipes..." />
    </div>
  );
}

export default SearchBar;
```

client/src/components/UserPreferences.js
```javascript
import React from 'react';

function UserPreferences() {
  return (
    <div>
      <select>
        <option value="beginner">Beginner</option>
        <option value="intermediate">Intermediate</option>
        <option value="advanced">Advanced</option>
      </select>
      <input type="checkbox" id="vegetarian" name="vegetarian" />
      <label for="vegetarian">Vegetarian</label>
      {/* Other dietary preferences go here */}
    </div>
  );
}

export default UserPreferences;
```

Please note that this is a simplified version of the application. There are many other features and functionalities that can be added, such as user authentication, recipe ratings, and more.