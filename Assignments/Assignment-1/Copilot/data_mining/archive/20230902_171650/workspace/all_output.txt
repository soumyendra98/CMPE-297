Given the constraints of using only HTML, CSS, and Bootstrap, we will not be able to create a fully dynamic intelligent recipe recommender. However, we can create a static web page that simulates some of the functionalities. 

Here are the core files and their purposes:

1. `index.html`: This is the main HTML file that will serve as the entry point of the application. It will contain the main structure of the web page.

2. `styles.css`: This CSS file will contain all the custom styles used in the application.

3. `bootstrap.min.css`: This is the Bootstrap CSS file that will provide the Bootstrap styles.

4. `recipes.json`: This JSON file will contain a static list of recipes that the application will use to display the recipes.

Now, let's create the content of each file.

`index.html`
```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Recipe Recommender</title>
    <link rel="stylesheet" href="bootstrap.min.css">
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <div class="container">
        <h1 class="text-center my-4">Recipe Recommender</h1>
        <div class="row">
            <!-- Recipe cards will be added here -->
        </div>
    </div>
    <script src="recipes.json"></script>
    <script src="script.js"></script>
</body>
</html>
```

`styles.css`
```css
body {
    background-color: #f8f9fa;
}

.card {
    margin-bottom: 20px;
}
```

`bootstrap.min.css`
This file will be the minified CSS file from Bootstrap. You can download it from the official Bootstrap website.

`recipes.json`
```json
[
    {
        "name": "Vegetarian Pasta",
        "diet": "Vegetarian",
        "ingredients": ["Pasta", "Tomato", "Garlic", "Basil"],
        "skill": "Beginner",
        "image": "https://via.placeholder.com/150"
    },
    {
        "name": "Chicken Stir Fry",
        "diet": "Low-carb",
        "ingredients": ["Chicken", "Bell Pepper", "Soy Sauce", "Garlic"],
        "skill": "Intermediate",
        "image": "https://via.placeholder.com/150"
    }
]
```

`script.js`
```javascript
window.onload = function() {
    var recipes = JSON.parse(recipes);
    var container = document.querySelector('.container .row');

    for (var i = 0; i < recipes.length; i++) {
        var card = document.createElement('div');
        card.className = 'card';
        card.style.width = '18rem';

        var img = document.createElement('img');
        img.className = 'card-img-top';
        img.src = recipes[i].image;
        card.appendChild(img);

        var cardBody = document.createElement('div');
        cardBody.className = 'card-body';

        var cardTitle = document.createElement('h5');
        cardTitle.className = 'card-title';
        cardTitle.textContent = recipes[i].name;
        cardBody.appendChild(cardTitle);

        var cardText = document.createElement('p');
        cardText.className = 'card-text';
        cardText.textContent = 'Diet: ' + recipes[i].diet + ', Skill: ' + recipes[i].skill;
        cardBody.appendChild(cardText);

        card.appendChild(cardBody);
        container.appendChild(card);
    }
};
```

Please note that this is a very basic implementation and does not include all the functionalities mentioned in the assumptions. For a fully functional intelligent recipe recommender, a server-side language (like Python, Node.js, etc.) and a database would be needed.